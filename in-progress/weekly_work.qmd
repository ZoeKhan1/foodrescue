---
title: "Weekly Work"
author: Zoe Khan
format: pdf
editor: source
output:
  html_document:
    toc: no
    df_print: paged
---

```{r}
#| eval: true
#| include: false

# Set outputs for rendering
knitr::opts_chunk$set(
  echo = FALSE, message = FALSE, warning = FALSE
)
```

```{r}
# Load packages
library(tidyverse)
library(dplyr)
library(knitr)
library(kableExtra)
#library(xcolor)
```

```{r}
# THIS SECTION IS THE ONLY CODE THAT YOU NEED TO CHANGE

# Step 1: download the CSV file from Qualtrics.
# Step 2: check original CSV for errors as it could mess up the program; it may be easier to spot errors in Excel format so you can also download an that file to look.
# Step 3: read in CSV data.

data <- read_csv("data/FRN_Collection_Form_March_3_2025.csv")

# Step 4: update column prefixes if the Qualtrics form has been changed. If adding another column between 13-19, you must add an underscore right after the hall name.

prefixes <- list(c("1_", "CCC_"), c("2_", "CD_"), c("3_", "CC_"), c("4", "C"), c("6", "H"), c("7", "KS"), c("8", "L"), c("9", "NG"), c("10", "T"), c("11", "O"), c("12", "Ca"), c("13", "CZ"))

# Step 5: update column suffixes if the Qualtrics form has been changed.

suffixes <- list(c("Q3", "containers"), c("Q4_16", "beef"), c("Q4_22", "beans"), c("Q4_17", "bread"), c("Q4_19", "chicken"), c("Q4_18", "dessert"), c("Q4_20", "fish"), c("Q4_21", "fruit"), c("Q4_24", "meat_substitute"), c("Q4_26", "pasta"), c("Q4_3", "pork"), c("Q4_27", "potatoes"), c("Q4_25", "rice"), c("Q4_23", "shellfish"), c("Q4_4", "tofu"), c("Q4_15", "turkey_lamb"), c("Q4_10", "vegetables"), c("Q4_14", "mixed"), c("Q5", "mixed_reasoning"))

```

```{r}
# Preliminary cleaning (deselecting irrelevant columns, filtering out previews, separating dining hall column)
clean_data <- data |>
  filter(Status == "IP Address") |>
  select(-c(StartDate, EndDate, Progress, RecipientLastName, RecipientFirstName, RecipientEmail, ExternalReference, LocationLatitude, LocationLongitude, DistributionChannel, UserLanguage, Progress, Finished, `Duration (in seconds)`, IPAddress, ResponseId, Status, RecordedDate)) |>
  separate_rows(Q2, sep = ",") |>
  rename(dining_hall = Q2) |>
  rename(date = Q1)

# function to rename prefixes
rename_cols_prefix <- function(data, prefix_pairs) {
  for (pair in prefix_pairs) {
    current_char <- pair[1]
    new_char <- pair[2]
    data <- data |>
      rename_with(
        ~ str_replace(., paste0("^", current_char), new_char), 
        starts_with(current_char)
      )
  }
  return(data)
}

# Function to rename columns with suffix
rename_cols_suffix <- function(data, suffix_pairs) {
  for (pair in suffix_pairs) {
    current_char <- pair[1]
    new_char <- pair[2]
    data <- data |>
      rename_with(
        ~ str_replace(., paste0(current_char, "$"), new_char), 
        ends_with(current_char)
      )
  }
  return(data)
}

# Calling the functions to rename the columns
clean_data <- rename_cols_prefix(clean_data, prefixes)
clean_data <- rename_cols_suffix(clean_data, suffixes)

```

```{r}
# Combining types of food data from the different dining halls
# Constructing a function to combine type columns
combine_data <- function(clean_data, new_column_name, column_suffix, c1, c2, c3, c4, c6, c7, c8, c9, c10, c11, c12, c13) {
  clean_data <- clean_data |>
    mutate(!!new_column_name := case_when(
      dining_hall == "Campus Center Cafe" ~ !!sym(paste0(c1, "_", column_suffix)),
      dining_hall == "Chase Duckett" ~ !!sym(paste0(c2, "_", column_suffix)),
      dining_hall == "Compass Cafe" ~ !!sym(paste0(c3, "_", column_suffix)),
      dining_hall == "Comstock" ~ !!sym(paste0(c4, "_", column_suffix)),
      dining_hall == "Haynes" ~ !!sym(paste0(c6, "_", column_suffix)),
      dining_hall == "King Scales" ~ !!sym(paste0(c7, "_", column_suffix)),
      dining_hall == "Lamont" ~ !!sym(paste0(c8, "_", column_suffix)),
      dining_hall == "Northrop Gillett" ~ !!sym(paste0(c9, "_", column_suffix)),
      dining_hall == "Tyler" ~ !!sym(paste0(c10, "_", column_suffix)),
      dining_hall == "Other" ~ !!sym(paste0(c11, "_", column_suffix)),
      dining_hall == "Catering" ~ !!sym(paste0(c12, "_", column_suffix)),
      dining_hall == "Cutter Ziskind" ~ !!sym(paste0(c13, "_", column_suffix))
    ))
  return(clean_data)
}

# Creating the columns to combine by iterating through the suffixes list and extracting names, flattening to chr class
cols_to_combine <- map(suffixes, ~ .x[2]) |>
  flatten_chr()

# Creating dining hall character by iterating through prefixes and extracting names, flattening to chr class, removing underscores
hall_codes <- map(prefixes, ~ .x[2]) |>
  flatten_chr() |>
  str_replace_all("_", "")

# Call function to combine food types data
for (item in cols_to_combine) {
  clean_data <- combine_data(clean_data, item, item, hall_codes[1], hall_codes[2], hall_codes[3], hall_codes[4], hall_codes[5], hall_codes[6], hall_codes[7], hall_codes[8], hall_codes[9], hall_codes[10], hall_codes[11], hall_codes[12])
}

# Selecting relevant columns --> this clean_data will give you accurate # of containers
clean_data <- clean_data |>
  select(date, dining_hall, cols_to_combine)

# Getting rid of "mixed_reasoning" and "containers" in preparation for the pivot
food_types <- cols_to_combine
food_types <- setdiff(food_types, "mixed_reasoning")
food_types <- setdiff(food_types, "containers")

# Using pivot_longer to convert food type columns into just one column
tidy_data <- clean_data |>
  pivot_longer(cols = all_of(food_types),
               names_to = "type",
               values_to = "weight",
               values_drop_na = TRUE) |>
  select(c(date, dining_hall, type, weight)) |>
  mutate(weight = as.numeric(weight))
```


# Weekly work for spring
```{r}
# Weekly work for spring

library(lubridate)

work_data <- tidy_data 
work_data$date <- mdy(work_data$date)

work_data_filtered <-  work_data |>
  filter(date >= mdy('02-24-2025')) |>
  filter(date <= mdy('03-02-2025'))

week_weight <- work_data_filtered |>
  summarize(total_weight = sum(weight, na.rm = TRUE))

work_data <- clean_data
work_data$date <- mdy(work_data$date)
work_data$containers <- as.numeric(work_data$containers)

work_data <- work_data |>
  filter(date >= mdy('02-24-2025')) |>
  filter(date <= mdy('03-02-2025'))

weekly_containers <- work_data |>
  summarize(num_containers = sum(containers, na.rm = TRUE))

num_pickups <- work_data |>
  filter(containers > 0) |>
  summarize(count = n())


spring_filter <- tidy_data 
spring_filter$date <- mdy(spring_filter$date)

spring_filter <- spring_filter |>
  filter(date >= mdy('02-10-2025')) |>
  filter(date <= mdy('03-03-2025'))

spring_weight <- spring_filter |>
  summarize(total_weight = sum(weight, na.rm = TRUE))

```



# Calculating # pick-ups, containers, total weight

```{r}
filtered <- clean_data |>
  filter(containers > 0)
num_pickups <- filtered |>
  summarize("number of pickups" = nrow(filtered))
num_containers <- clean_data |>
  filter(dining_hall != "Compass Cafe" & dining_hall != "Campus Center Cafe") |>
  mutate(containers = as.numeric(containers)) |>
  summarize(num_containers = sum(containers, na.rm = TRUE))
total_weight <- tidy_data |>
  summarize(total_weight = round(sum(weight, na.rm = TRUE), 1))


filtered <- tidy_data |>
  group_by(date)
days <- filtered |>
  summarize(n = nrow(date))
number_days <- days |>
  summarize(days = nrow(days))

# looking for average pickups per week
# number days/7
avg_pickups_weekly <- num_pickups |>
  summarize(avg = round((num_pickups / (number_days$days / 7)), 1))


kable(num_pickups, col.names = c("Number of Pickups")) |>
  row_spec(0, background = "yellow")
kable(num_containers, col.names = c("Number of Containers")) |>
  row_spec(0, background = "yellow")
kable(total_weight, col.names = c("Total Pounds Recovered")) |>
  row_spec(0, background = "yellow")

dining_hall_names <- c("Campus Center Cafe", "Chase Duckett", "Compass Cafe", "Comstock", "Haynes", "King Scales", "Lamont", "Northrop Gillett", "Tyler", "Other", "Catering", "Cutter Ziskind")

calls <- c("As needed", "7", "7", "4", "1", "7", "1", "7", "7", "As needed", "As needed", "6")
dh_calls <- data.frame(dining_hall_names, calls)
```


## Number of times we call each dining hall on a typical week

```{r}
#| echo: false
kable(dh_calls, col.names = c("Dining Hall", "Calls Per Week"))
```


# Table Summaries

## Total food recovered

```{r}
tidy_data |>
  summarize(total_weight = round(sum(weight, na.rm = TRUE), 1)) |>
  arrange(desc(total_weight)) |>
  kable(col.names = c("Total Weight (lb)")) |>
  row_spec(0, background = "yellow")
```

## Recovery by food type

```{r}
tidy_data |>
  group_by(type) |>
  summarize(total_weight = round(sum(weight, na.rm = TRUE), 1)) |>
  arrange(desc(total_weight)) |>
  kable(col.names = c("Type", "Total Weight (lb)")) |>
  row_spec(0, background = "yellow")
```

## Recovery by dining hall

```{r}
tidy_data |>
  group_by(dining_hall) |>
  summarize(total_weight = round(sum(weight, na.rm = TRUE), 1)) |>
  arrange(desc(total_weight)) |>
  kable(col.names = c("Dining Hall", "Total Weight (lb)")) |>
  row_spec(0, background = "yellow")
```

```{r}
#| echo: false
lb <- filtered_s |>
  group_by(`Which dining hall is this from?`) |>
  summarize(pounds = round(sum(as.numeric(`Total combined weight of food from this dining hall?`)), 1)) |>
  arrange(desc(pounds)) |>
  rename("Dining Hall" = `Which dining hall is this from?`) |>
  rename("Total Weight (lb)" = pounds)

kable(lb) |>
  row_spec(0, background = "pink")
```

## Top 25 Recovered Foods (by dining hall and food type)

```{r}
tidy_data |>
  group_by(dining_hall, type) |>
  summarize(total_weight = round(sum(weight, na.rm = TRUE), 1)) |>
  arrange(desc(total_weight)) |>
  head(25) |>
  kable(col.names = c("Dining Hall", "Type", "Total Weight")) |>
  row_spec(0, background = "yellow")
```

# Data Visualization

```{r}
#| echo: false
ggplot(data = tidy_data, aes(x = fct_reorder(dining_hall, desc(weight), .fun = sum), y = `weight`)) +
         geom_col() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  labs(title = "Recovery By Dining Hall: Fall 2024", x = "Dining Hall", y = "Total Weight (lb)") +
  theme(legend.position = "none")
```

## Food recovery metrics for all dining halls

```{r}
metric_plots <- function(data, dining_hall) {
  {{data}} |>
    filter(dining_hall == {{dining_hall}}) |>
    ggplot(aes(x = fct_rev(fct_reorder(type, weight, sum)), y = weight)) +
    geom_col() +
    labs(title = paste(dining_hall, "Recovery by Food Type"), x = "Food Type", y = "Weight (lbs)") +
    theme(axis.text.x = element_text(angle = 30, hjust = 1))
}

tidy_filtered <- tidy_data |>
  filter(!is.na(weight))

for (i in dining_hall_names) {
  print(metric_plots(tidy_filtered, i))
}
  
```

## Other preliminary graphics

```{r}
tidy_data |>
  filter(type == "chicken", !is.na(weight)) |>
  ggplot(aes(x = fct_rev(fct_reorder(dining_hall, weight, sum)), y = weight)) +
  geom_col() +
  labs(title = "Chicken Recovery by Dining Hall", x = "Dining Hall", y = "Weight") +
  theme(axis.text.x = element_text(angle = 30, hjust = 1))

tidy_data |>
  filter(type %in% c("chicken", "beef", "fish", "shellfish", "turkey_lamb", "meat_substitute"),
         !is.na(weight)) |>
  ggplot(aes(x = fct_rev(fct_reorder(dining_hall, weight, sum)), y = weight, fill = type)) +
  geom_col() +
  labs(title = "Meat Recovery by Dining Hall", x = "Dining Hall", y = "Weight") +
  theme(axis.text.x = element_text(angle = 30, hjust = 1))

#tidy_data$date <- as.Date(tidy_data$date, format = "%m-%d-%Y")
#tidy_data |>
#  mutate(year = year(date), month = month(date, label = TRUE, abbr = FALSE), day = day(date)) |>
#  group_by(day, month) |>
#  summarize(sum = sum(weight, na.rm = TRUE)) |>
#  ggplot(aes(x = day, y = sum)) +
#  geom_line(linewidth = 0.7) +
#  facet_wrap(vars(month), ncol = 4) +
#  labs(title = "Recovery over the semester", x = "Day", y = "Weight (lbs)")
```

